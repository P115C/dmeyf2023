require("rpart")
require("parallel")
# los parametros del script
#  deben copiarse a mano
PARAM <- list()
#-----------------------------
PARAM$experimento <- "KA4000-01"
# puede ser { "ternaria", "binaria1", "binaria2" }
PARAM$clase <- "ternaria"
# poner 0 si no se quiere que se haga oversampling
PARAM$oversampling <- 100
# poner algo mayor a cero si se quiere cortar por probabilidad
#  generalmente debe ser 0.025 , si se quiere cortar por probabilidad
PARAM$prob_corte <-  0.025 # -1
# poner -1 si se quiere cortar por probabilidad
#  un numero mayor o igual a cero indica que se corta por cant envios
PARAM$corte <- -1 # 10000
# estos valores son simplemente de ejemplo
PARAM$rpart$cp <- -1
PARAM$rpart$minsplit <- 2500
PARAM$rpart$minbucket <- 250
PARAM$rpart$maxdepth <- 6
PARAM$semilla_azar <- c(886609, 201821) # 623423, 105389, 151051)
PARAM$xval_folds <- 5  # folds del cross validation
PARAM$cores <- 1
archivo_log <- "aplicar_modelo_log0.txt"
#-----------------------------
if( PARAM$prob_corte <= 0 & PARAM$corte <= 0 ) stop("debe elegir al menos una opcion de corte" )
if( PARAM$prob_corte > 0 & PARAM$corte > 0 ) stop("No puede elegir dos opcinoes de corte al mismo tiempo" )
if( PARAM$clase == "binaria2" & PARAM$corte <= 0 ) stop( "en el caso de clase binaria2  debe cortar por envios, PARAM$corte" )
setwd("C:/Users/Usuario/Documents/P/M/dmeyf/fuente/")
# cargo el dataset
dataset <- fread("./datasets/competencia_01.csv")
switch(PARAM$clase,
"ternaria"  = dataset[, clase_nueva := ifelse( clase_ternaria=="BAJA+2", "POS", clase_ternaria ) ],
"binaria1"  = dataset[, clase_nueva := ifelse( clase_ternaria=="BAJA+2", "POS", "NEG" ) ],
"binaria2"  = dataset[, clase_nueva := ifelse( clase_ternaria %in% c( "BAJA+1","BAJA+2"), "POS", "NEG" ) ],
stop(" PARAM$clase debe tener un valor valido")
)
# creo la carpeta donde va el experimento
#  HT  representa  Hiperparameter Tuning
dir.create("./exp/", showWarnings = FALSE)
dir.create( paste0("./exp/", PARAM$experimento, "/"),
showWarnings = FALSE)
#------------------------------------------------------------------------------
# graba a un archivo los componentes de lista
# para el primer registro, escribe antes los titulos
loguear <- function(reg, arch, verbose = TRUE) {
archivo <- arch
# Escribo los titulos
if (!file.exists(archivo)) {
linea <- paste0(
"fecha\t",
paste(list.names(reg), collapse = "\t"), "\n"
)
cat(linea, file = archivo)
}
# la fecha y hora
linea <- paste0(
format(Sys.time(), "%Y%m%d %H%M%S"), "\t",
gsub(", ", "\t", toString(reg)), "\n"
)
# grabo al archivo
cat(linea, file = archivo, append = TRUE)
# imprimo por pantalla
if (verbose) cat(linea)
}
#------------------------------------------------------------------------------
# particionar agrega una columna llamada fold a un dataset
#   que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30),
#  agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
# particionar( data=dataset, division=c(1,1,1,1,1),
#  agrupa=clase_ternaria, seed=semilla)   divide el dataset en 5 particiones
particionar <- function(data, division, agrupa = "", campo = "fold",
start = 1, seed = NA) {
if (!is.na(seed)) set.seed(seed)
bloque <- unlist(mapply(
function(x, y) {
rep(y, x)
}, division,
seq(from = start, length.out = length(division))
))
data[, (campo) := sample(rep(bloque, ceiling(.N / length(bloque))))[1:.N],
by = agrupa
]
}
# fold_test  tiene el numero de fold que voy a usar para testear,
#  entreno en el resto de los folds
# param tiene los hiperparametros del arbol
ArbolSimple <- function(fold_test, data, param) {
data_fold = data[fold != fold_test, ]
vector_pesos_fold <- rep( 1.0, nrow(data_fold) )
if( PARAM$oversampling > 0 )
vector_pesos <- data_fold[, ifelse( clase_nueva=="POS", PARAM$oversampling, 1) ]
# genero el modelo
# entreno en todo MENOS el fold_test que uso para testing
modelo <- rpart("clase_nueva ~ . -clase_ternaria",
data = data_fold,
xval = 0,
control = param,
weights = vector_pesos
)
# aplico el modelo a los datos de testing
# aplico el modelo sobre los datos de testing
# quiero que me devuelva probabilidades
prediccion <- predict(modelo,
data[fold == fold_test, ],
type = "prob"
)
# esta es la probabilidad de baja
prob_baja2 <- prediccion[, "POS"]
# calculo la ganancia
ganancia_testing <- data[fold == fold_test][
prob_baja2 > PARAM$prob_corte,
sum(ifelse(clase_nueva == "POS",
273000, -7000
))
]
# esta es la ganancia sobre el fold de testing, NO esta normalizada
return(ganancia_testing)
}
ArbolesCrossValidation <- function(data, param, qfolds, pagrupa, semilla) {
# generalmente  c(1, 1, 1, 1, 1 )  cinco unos
divi <- rep(1, qfolds)
# particiono en dataset en folds
particionar(data, divi, seed = semilla, agrupa = pagrupa)
ganancias <- mcmapply(ArbolSimple,
seq(qfolds), # 1 2 3 4 5
MoreArgs = list(data, param),
SIMPLIFY = FALSE,
mc.cores = PARAM$cores
)
data[, fold := NULL]
ganancia_xval <- sum(unlist(ganancias))
return(ganancia_xval)
}
EstimarGanancia <- function() {
# qfolds= PARAM$xval_folds  la cantidad de folds
gans <- c()
for (semilla in PARAM$semilla_azar)
{
ganancia <- ArbolesCrossValidation(dataset,
param = PARAM$rpart,
qfolds = PARAM$xval_folds,
pagrupa = "clase_nueva",
semilla = semilla
)
gans <- c(gans, ganancia)
}
# imprimo el vector con las ganancias de xval
# para que se aprecia la variabilidad aun con 5-fold
cat(gans, "\n")
# logueo
xx <- PARAM$rpart
xx$xval_repeats <- length(PARAM$semilla_azar)
xx$xval_folds <- PARAM$xval_folds
xx$ganancia <- mean(gans)
loguear(xx, arch = archivo_log)
return(mean(gans))
}
# Establezco el Working Directory DEL EXPERIMENTO
setwd("C:/Users/Usuario/Documents/P/M/dmeyf/fuente/")
setwd(paste0("./exp/", PARAM$experimento, "/"))
EstimarGanancia()
# limpio la memoria
rm(list = ls()) # remove all objects
gc() # garbage collection
require("data.table")
require("rlist")
require("rpart")
require("parallel")
# los parametros del script
#  deben copiarse a mano
PARAM <- list()
#-----------------------------
PARAM$experimento <- "KA4000-01"
# puede ser { "ternaria", "binaria1", "binaria2" }
PARAM$clase <- "ternaria"
# poner 0 si no se quiere que se haga oversampling
PARAM$oversampling <- 100
# poner algo mayor a cero si se quiere cortar por probabilidad
#  generalmente debe ser 0.025 , si se quiere cortar por probabilidad
PARAM$prob_corte <-  0.025 # -1
# poner -1 si se quiere cortar por probabilidad
#  un numero mayor o igual a cero indica que se corta por cant envios
PARAM$corte <- -1 # 10000
# estos valores son simplemente de ejemplo
PARAM$rpart$cp <- -1
PARAM$rpart$minsplit <- 2500
PARAM$rpart$minbucket <- 250
PARAM$rpart$maxdepth <- 6
PARAM$semilla_azar <- c(886609, 201821) # 623423, 105389, 151051)
PARAM$xval_folds <- 5  # folds del cross validation
PARAM$cores <- 1
archivo_log <- "aplicar_modelo_log0.txt"
#-----------------------------
if( PARAM$prob_corte <= 0 & PARAM$corte <= 0 ) stop("debe elegir al menos una opcion de corte" )
if( PARAM$prob_corte > 0 & PARAM$corte > 0 ) stop("No puede elegir dos opcinoes de corte al mismo tiempo" )
if( PARAM$clase == "binaria2" & PARAM$corte <= 0 ) stop( "en el caso de clase binaria2  debe cortar por envios, PARAM$corte" )
setwd("C:/Users/Usuario/Documents/P/M/dmeyf/fuente/")
# cargo el dataset
dataset <- fread("./datasets/competencia_01.csv")
switch(PARAM$clase,
"ternaria"  = dataset[, clase_nueva := ifelse( clase_ternaria=="BAJA+2", "POS", clase_ternaria ) ],
"binaria1"  = dataset[, clase_nueva := ifelse( clase_ternaria=="BAJA+2", "POS", "NEG" ) ],
"binaria2"  = dataset[, clase_nueva := ifelse( clase_ternaria %in% c( "BAJA+1","BAJA+2"), "POS", "NEG" ) ],
stop(" PARAM$clase debe tener un valor valido")
)
# creo la carpeta donde va el experimento
#  HT  representa  Hiperparameter Tuning
dir.create("./exp/", showWarnings = FALSE)
dir.create( paste0("./exp/", PARAM$experimento, "/"),
showWarnings = FALSE)
#------------------------------------------------------------------------------
# graba a un archivo los componentes de lista
# para el primer registro, escribe antes los titulos
loguear <- function(reg, arch, verbose = TRUE) {
archivo <- arch
# Escribo los titulos
if (!file.exists(archivo)) {
linea <- paste0(
"fecha\t",
paste(list.names(reg), collapse = "\t"), "\n"
)
cat(linea, file = archivo)
}
# la fecha y hora
linea <- paste0(
format(Sys.time(), "%Y%m%d %H%M%S"), "\t",
gsub(", ", "\t", toString(reg)), "\n"
)
# grabo al archivo
cat(linea, file = archivo, append = TRUE)
# imprimo por pantalla
if (verbose) cat(linea)
}
#------------------------------------------------------------------------------
# particionar agrega una columna llamada fold a un dataset
#   que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30),
#  agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
# particionar( data=dataset, division=c(1,1,1,1,1),
#  agrupa=clase_ternaria, seed=semilla)   divide el dataset en 5 particiones
particionar <- function(data, division, agrupa = "", campo = "fold",
start = 1, seed = NA) {
if (!is.na(seed)) set.seed(seed)
bloque <- unlist(mapply(
function(x, y) {
rep(y, x)
}, division,
seq(from = start, length.out = length(division))
))
data[, (campo) := sample(rep(bloque, ceiling(.N / length(bloque))))[1:.N],
by = agrupa
]
}
# fold_test  tiene el numero de fold que voy a usar para testear,
#  entreno en el resto de los folds
# param tiene los hiperparametros del arbol
ArbolSimple <- function(fold_test, data, param) {
data_fold = data[fold != fold_test, ]
vector_pesos_fold <- rep( 1.0, nrow(data_fold) )
if( PARAM$oversampling > 0 )
vector_pesos_fold <- data_fold[, ifelse( clase_nueva=="POS", PARAM$oversampling, 1) ]
# genero el modelo
# entreno en todo MENOS el fold_test que uso para testing
modelo <- rpart("clase_nueva ~ . -clase_ternaria",
data = data_fold,
xval = 0,
control = param,
weights = vector_pesos_fold
)
# aplico el modelo a los datos de testing
# aplico el modelo sobre los datos de testing
# quiero que me devuelva probabilidades
prediccion <- predict(modelo,
data[fold == fold_test, ],
type = "prob"
)
# esta es la probabilidad de baja
prob_baja2 <- prediccion[, "POS"]
# calculo la ganancia
ganancia_testing <- data[fold == fold_test][
prob_baja2 > PARAM$prob_corte,
sum(ifelse(clase_nueva == "POS",
273000, -7000
))
]
# esta es la ganancia sobre el fold de testing, NO esta normalizada
return(ganancia_testing)
}
ArbolesCrossValidation <- function(data, param, qfolds, pagrupa, semilla) {
# generalmente  c(1, 1, 1, 1, 1 )  cinco unos
divi <- rep(1, qfolds)
# particiono en dataset en folds
particionar(data, divi, seed = semilla, agrupa = pagrupa)
ganancias <- mcmapply(ArbolSimple,
seq(qfolds), # 1 2 3 4 5
MoreArgs = list(data, param),
SIMPLIFY = FALSE,
mc.cores = PARAM$cores
)
data[, fold := NULL]
ganancia_xval <- sum(unlist(ganancias))
return(ganancia_xval)
}
EstimarGanancia <- function() {
# qfolds= PARAM$xval_folds  la cantidad de folds
gans <- c()
for (semilla in PARAM$semilla_azar)
{
ganancia <- ArbolesCrossValidation(dataset,
param = PARAM$rpart,
qfolds = PARAM$xval_folds,
pagrupa = "clase_nueva",
semilla = semilla
)
gans <- c(gans, ganancia)
}
# imprimo el vector con las ganancias de xval
# para que se aprecia la variabilidad aun con 5-fold
cat(gans, "\n")
# logueo
xx <- PARAM$rpart
xx$xval_repeats <- length(PARAM$semilla_azar)
xx$xval_folds <- PARAM$xval_folds
xx$ganancia <- mean(gans)
loguear(xx, arch = archivo_log)
return(mean(gans))
}
# Establezco el Working Directory DEL EXPERIMENTO
setwd("C:/Users/Usuario/Documents/P/M/dmeyf/fuente/")
setwd(paste0("./exp/", PARAM$experimento, "/"))
EstimarGanancia()
View(PARAM)
# limpio la memoria
rm(list = ls()) # remove all objects
gc() # garbage collection
require("data.table")
require("rlist")
require("rpart")
require("parallel")
# los parametros del script
#  deben copiarse a mano
PARAM <- list()
#-----------------------------
PARAM$experimento <- "KA4000-01"
# puede ser { "ternaria", "binaria1", "binaria2" }
PARAM$clase <- "ternaria"
# poner 0 si no se quiere que se haga oversampling
PARAM$oversampling <- 100
# poner algo mayor a cero si se quiere cortar por probabilidad
#  generalmente debe ser 0.025 , si se quiere cortar por probabilidad
PARAM$prob_corte <-  0.025 # -1
# poner -1 si se quiere cortar por probabilidad
#  un numero mayor o igual a cero indica que se corta por cant envios
PARAM$corte <- -1 # 10000
# estos valores son simplemente de ejemplo
PARAM$rpart$cp <- -1
PARAM$rpart$minsplit <- 2500
PARAM$rpart$minbucket <- 250
PARAM$rpart$maxdepth <- 6
PARAM$semilla_azar <- c(886609, 201821) # 623423, 105389, 151051)
PARAM$xval_folds <- 5  # folds del cross validation
PARAM$cores <- 1
archivo_log <- "aplicar_modelo_log0.txt"
#-----------------------------
if( PARAM$prob_corte <= 0 & PARAM$corte <= 0 ) stop("debe elegir al menos una opcion de corte" )
if( PARAM$prob_corte > 0 & PARAM$corte > 0 ) stop("No puede elegir dos opcinoes de corte al mismo tiempo" )
if( PARAM$clase == "binaria2" & PARAM$corte <= 0 ) stop( "en el caso de clase binaria2  debe cortar por envios, PARAM$corte" )
setwd("C:/Users/Usuario/Documents/P/M/dmeyf/fuente/")
# cargo el dataset
dataset <- fread("./datasets/competencia_01.csv")
switch(PARAM$clase,
"ternaria"  = dataset[, clase_nueva := ifelse( clase_ternaria=="BAJA+2", "POS", clase_ternaria ) ],
"binaria1"  = dataset[, clase_nueva := ifelse( clase_ternaria=="BAJA+2", "POS", "NEG" ) ],
"binaria2"  = dataset[, clase_nueva := ifelse( clase_ternaria %in% c( "BAJA+1","BAJA+2"), "POS", "NEG" ) ],
stop(" PARAM$clase debe tener un valor valido")
)
# creo la carpeta donde va el experimento
#  HT  representa  Hiperparameter Tuning
dir.create("./exp/", showWarnings = FALSE)
dir.create( paste0("./exp/", PARAM$experimento, "/"),
showWarnings = FALSE)
#------------------------------------------------------------------------------
# graba a un archivo los componentes de lista
# para el primer registro, escribe antes los titulos
loguear <- function(reg, arch, verbose = TRUE) {
archivo <- arch
# Escribo los titulos
if (!file.exists(archivo)) {
linea <- paste0(
"fecha\t",
paste(list.names(reg), collapse = "\t"), "\n"
)
cat(linea, file = archivo)
}
# la fecha y hora
linea <- paste0(
format(Sys.time(), "%Y%m%d %H%M%S"), "\t",
gsub(", ", "\t", toString(reg)), "\n"
)
# grabo al archivo
cat(linea, file = archivo, append = TRUE)
# imprimo por pantalla
if (verbose) cat(linea)
}
#------------------------------------------------------------------------------
# particionar agrega una columna llamada fold a un dataset
#   que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30),
#  agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
# particionar( data=dataset, division=c(1,1,1,1,1),
#  agrupa=clase_ternaria, seed=semilla)   divide el dataset en 5 particiones
particionar <- function(data, division, agrupa = "", campo = "fold",
start = 1, seed = NA) {
if (!is.na(seed)) set.seed(seed)
bloque <- unlist(mapply(
function(x, y) {
rep(y, x)
}, division,
seq(from = start, length.out = length(division))
))
data[, (campo) := sample(rep(bloque, ceiling(.N / length(bloque))))[1:.N],
by = agrupa
]
}
# fold_test  tiene el numero de fold que voy a usar para testear,
#  entreno en el resto de los folds
# param tiene los hiperparametros del arbol
ArbolSimple <- function(fold_test, data, param) {
data_fold <- data[fold != fold_test, ]
vector_pesos_fold <- rep( 1.0, nrow(data_fold) )
if( PARAM$oversampling > 0 )
vector_pesos_fold <- data_fold[, ifelse( clase_nueva=="POS", PARAM$oversampling, 1) ]
print(vector_pesos_fold)
# genero el modelo
# entreno en todo MENOS el fold_test que uso para testing
modelo <- rpart(
"clase_nueva ~ . -clase_ternaria",
data = data_fold,
xval = 0,
control = param,
weights = vector_pesos_fold
)
# aplico el modelo a los datos de testing
# aplico el modelo sobre los datos de testing
# quiero que me devuelva probabilidades
prediccion <- predict(
modelo,
data[fold == fold_test, ],
type = "prob"
)
# esta es la probabilidad de baja
prob_baja2 <- prediccion[, "POS"]
# calculo la ganancia
ganancia_testing <- data[fold == fold_test][
prob_baja2 > PARAM$prob_corte,
sum(ifelse(clase_nueva == "POS",
273000, -7000
))
]
# esta es la ganancia sobre el fold de testing, NO esta normalizada
return(ganancia_testing)
}
ArbolesCrossValidation <- function(data, param, qfolds, pagrupa, semilla)
{
# generalmente  c(1, 1, 1, 1, 1 )  cinco unos
divi <- rep(1, qfolds)
# particiono en dataset en folds
particionar(data, divi, seed = semilla, agrupa = pagrupa)
ganancias <- mcmapply(
ArbolSimple,
seq(qfolds), # 1 2 3 4 5
MoreArgs = list(data, param),
SIMPLIFY = FALSE,
mc.cores = PARAM$cores
)
data[, fold := NULL]
ganancia_xval <- sum(unlist(ganancias))
return(ganancia_xval)
}
EstimarGanancia <- function() {
# qfolds= PARAM$xval_folds  la cantidad de folds
gans <- c()
for (semilla in PARAM$semilla_azar)
{
ganancia <- ArbolesCrossValidation(
dataset,
param = PARAM$rpart,
qfolds = PARAM$xval_folds,
pagrupa = "clase_nueva",
semilla = semilla
)
gans <- c(gans, ganancia)
}
# imprimo el vector con las ganancias de xval
# para que se aprecia la variabilidad aun con 5-fold
cat(gans, "\n")
# logueo
xx <- PARAM$rpart
xx$xval_repeats <- length(PARAM$semilla_azar)
xx$xval_folds <- PARAM$xval_folds
xx$ganancia <- mean(gans)
loguear(xx, arch = archivo_log)
return(mean(gans))
}
# Establezco el Working Directory DEL EXPERIMENTO
setwd("C:/Users/Usuario/Documents/P/M/dmeyf/fuente/")
setwd(paste0("./exp/", PARAM$experimento, "/"))
EstimarGanancia()
